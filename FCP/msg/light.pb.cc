// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: light.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "light.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LightMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LightMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_light_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_light_2eproto() {
  protobuf_AddDesc_light_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "light.proto");
  GOOGLE_CHECK(file != NULL);
  LightMessage_descriptor_ = file->message_type(0);
  static const int LightMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMessage, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMessage, delay_),
  };
  LightMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LightMessage_descriptor_,
      LightMessage::internal_default_instance(),
      LightMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(LightMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LightMessage, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_light_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LightMessage_descriptor_, LightMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_light_2eproto() {
  LightMessage_default_instance_.Shutdown();
  delete LightMessage_reflection_;
}

void protobuf_InitDefaults_light_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  LightMessage_default_instance_.DefaultConstruct();
  LightMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_light_2eproto_once_);
void protobuf_InitDefaults_light_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_light_2eproto_once_,
                 &protobuf_InitDefaults_light_2eproto_impl);
}
void protobuf_AddDesc_light_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_light_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013light.proto\"-\n\014LightMessage\022\016\n\006status\030"
    "\001 \001(\005\022\r\n\005delay\030\002 \001(\005b\006proto3", 68);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "light.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_light_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_light_2eproto_once_);
void protobuf_AddDesc_light_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_light_2eproto_once_,
                 &protobuf_AddDesc_light_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_light_2eproto {
  StaticDescriptorInitializer_light_2eproto() {
    protobuf_AddDesc_light_2eproto();
  }
} static_descriptor_initializer_light_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LightMessage::kStatusFieldNumber;
const int LightMessage::kDelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LightMessage::LightMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_light_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:LightMessage)
}

void LightMessage::InitAsDefaultInstance() {
}

LightMessage::LightMessage(const LightMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:LightMessage)
}

void LightMessage::SharedCtor() {
  ::memset(&status_, 0, reinterpret_cast<char*>(&delay_) -
    reinterpret_cast<char*>(&status_) + sizeof(delay_));
  _cached_size_ = 0;
}

LightMessage::~LightMessage() {
  // @@protoc_insertion_point(destructor:LightMessage)
  SharedDtor();
}

void LightMessage::SharedDtor() {
}

void LightMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LightMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LightMessage_descriptor_;
}

const LightMessage& LightMessage::default_instance() {
  protobuf_InitDefaults_light_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<LightMessage> LightMessage_default_instance_;

LightMessage* LightMessage::New(::google::protobuf::Arena* arena) const {
  LightMessage* n = new LightMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LightMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:LightMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(LightMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<LightMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(status_, delay_);

#undef ZR_HELPER_
#undef ZR_

}

bool LightMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LightMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 status = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_delay;
        break;
      }

      // optional int32 delay = 2;
      case 2: {
        if (tag == 16) {
         parse_delay:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:LightMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LightMessage)
  return false;
#undef DO_
}

void LightMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LightMessage)
  // optional int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 delay = 2;
  if (this->delay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->delay(), output);
  }

  // @@protoc_insertion_point(serialize_end:LightMessage)
}

::google::protobuf::uint8* LightMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LightMessage)
  // optional int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 delay = 2;
  if (this->delay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->delay(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:LightMessage)
  return target;
}

size_t LightMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LightMessage)
  size_t total_size = 0;

  // optional int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // optional int32 delay = 2;
  if (this->delay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->delay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LightMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LightMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const LightMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LightMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LightMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LightMessage)
    UnsafeMergeFrom(*source);
  }
}

void LightMessage::MergeFrom(const LightMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LightMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void LightMessage::UnsafeMergeFrom(const LightMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.delay() != 0) {
    set_delay(from.delay());
  }
}

void LightMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LightMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LightMessage::CopyFrom(const LightMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LightMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool LightMessage::IsInitialized() const {

  return true;
}

void LightMessage::Swap(LightMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LightMessage::InternalSwap(LightMessage* other) {
  std::swap(status_, other->status_);
  std::swap(delay_, other->delay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LightMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LightMessage_descriptor_;
  metadata.reflection = LightMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LightMessage

// optional int32 status = 1;
void LightMessage::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 LightMessage::status() const {
  // @@protoc_insertion_point(field_get:LightMessage.status)
  return status_;
}
void LightMessage::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:LightMessage.status)
}

// optional int32 delay = 2;
void LightMessage::clear_delay() {
  delay_ = 0;
}
::google::protobuf::int32 LightMessage::delay() const {
  // @@protoc_insertion_point(field_get:LightMessage.delay)
  return delay_;
}
void LightMessage::set_delay(::google::protobuf::int32 value) {
  
  delay_ = value;
  // @@protoc_insertion_point(field_set:LightMessage.delay)
}

inline const LightMessage* LightMessage::internal_default_instance() {
  return &LightMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
