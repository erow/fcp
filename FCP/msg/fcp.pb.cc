// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fcp.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "fcp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* FcpMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FcpMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FcpMessage_FcpType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_fcp_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_fcp_2eproto() {
  protobuf_AddDesc_fcp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "fcp.proto");
  GOOGLE_CHECK(file != NULL);
  FcpMessage_descriptor_ = file->message_type(0);
  static const int FcpMessage_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcpMessage, dst_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcpMessage, src_uri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcpMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcpMessage, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcpMessage, direction_),
  };
  FcpMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FcpMessage_descriptor_,
      FcpMessage::internal_default_instance(),
      FcpMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(FcpMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FcpMessage, _internal_metadata_));
  FcpMessage_FcpType_descriptor_ = FcpMessage_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_fcp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FcpMessage_descriptor_, FcpMessage::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_fcp_2eproto() {
  FcpMessage_default_instance_.Shutdown();
  delete FcpMessage_reflection_;
}

void protobuf_InitDefaults_fcp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  FcpMessage_default_instance_.DefaultConstruct();
  FcpMessage_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_fcp_2eproto_once_);
void protobuf_InitDefaults_fcp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_fcp_2eproto_once_,
                 &protobuf_InitDefaults_fcp_2eproto_impl);
}
void protobuf_AddDesc_fcp_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_fcp_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tfcp.proto\"\272\001\n\nFcpMessage\022\017\n\007dst_uri\030\001 "
    "\001(\t\022\017\n\007src_uri\030\004 \001(\t\022!\n\004type\030\002 \001(\0162\023.Fcp"
    "Message.FcpType\022\014\n\004data\030\003 \001(\t\022\021\n\tdirecti"
    "on\030\005 \001(\005\"F\n\007FcpType\022\013\n\007Publish\020\000\022\016\n\nExtP"
    "ublish\020\002\022\r\n\tSUBSCRIBE\020\003\022\017\n\013UNSUBSCRIBE\020\004"
    "b\006proto3", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fcp.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_fcp_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_fcp_2eproto_once_);
void protobuf_AddDesc_fcp_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_fcp_2eproto_once_,
                 &protobuf_AddDesc_fcp_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_fcp_2eproto {
  StaticDescriptorInitializer_fcp_2eproto() {
    protobuf_AddDesc_fcp_2eproto();
  }
} static_descriptor_initializer_fcp_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* FcpMessage_FcpType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FcpMessage_FcpType_descriptor_;
}
bool FcpMessage_FcpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FcpMessage_FcpType FcpMessage::Publish;
const FcpMessage_FcpType FcpMessage::ExtPublish;
const FcpMessage_FcpType FcpMessage::SUBSCRIBE;
const FcpMessage_FcpType FcpMessage::UNSUBSCRIBE;
const FcpMessage_FcpType FcpMessage::FcpType_MIN;
const FcpMessage_FcpType FcpMessage::FcpType_MAX;
const int FcpMessage::FcpType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FcpMessage::kDstUriFieldNumber;
const int FcpMessage::kSrcUriFieldNumber;
const int FcpMessage::kTypeFieldNumber;
const int FcpMessage::kDataFieldNumber;
const int FcpMessage::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FcpMessage::FcpMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_fcp_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:FcpMessage)
}

void FcpMessage::InitAsDefaultInstance() {
}

FcpMessage::FcpMessage(const FcpMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:FcpMessage)
}

void FcpMessage::SharedCtor() {
  dst_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_uri_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&type_) + sizeof(direction_));
  _cached_size_ = 0;
}

FcpMessage::~FcpMessage() {
  // @@protoc_insertion_point(destructor:FcpMessage)
  SharedDtor();
}

void FcpMessage::SharedDtor() {
  dst_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_uri_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FcpMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FcpMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FcpMessage_descriptor_;
}

const FcpMessage& FcpMessage::default_instance() {
  protobuf_InitDefaults_fcp_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<FcpMessage> FcpMessage_default_instance_;

FcpMessage* FcpMessage::New(::google::protobuf::Arena* arena) const {
  FcpMessage* n = new FcpMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FcpMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:FcpMessage)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(FcpMessage, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<FcpMessage*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(type_, direction_);
  dst_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  src_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());

#undef ZR_HELPER_
#undef ZR_

}

bool FcpMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:FcpMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string dst_uri = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dst_uri().data(), this->dst_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FcpMessage.dst_uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .FcpMessage.FcpType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::FcpMessage_FcpType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional string data = 3;
      case 3: {
        if (tag == 26) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FcpMessage.data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_src_uri;
        break;
      }

      // optional string src_uri = 4;
      case 4: {
        if (tag == 34) {
         parse_src_uri:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src_uri()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->src_uri().data(), this->src_uri().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "FcpMessage.src_uri"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_direction;
        break;
      }

      // optional int32 direction = 5;
      case 5: {
        if (tag == 40) {
         parse_direction:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &direction_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:FcpMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:FcpMessage)
  return false;
#undef DO_
}

void FcpMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:FcpMessage)
  // optional string dst_uri = 1;
  if (this->dst_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_uri().data(), this->dst_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FcpMessage.dst_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->dst_uri(), output);
  }

  // optional .FcpMessage.FcpType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FcpMessage.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data(), output);
  }

  // optional string src_uri = 4;
  if (this->src_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_uri().data(), this->src_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FcpMessage.src_uri");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->src_uri(), output);
  }

  // optional int32 direction = 5;
  if (this->direction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->direction(), output);
  }

  // @@protoc_insertion_point(serialize_end:FcpMessage)
}

::google::protobuf::uint8* FcpMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:FcpMessage)
  // optional string dst_uri = 1;
  if (this->dst_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dst_uri().data(), this->dst_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FcpMessage.dst_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->dst_uri(), target);
  }

  // optional .FcpMessage.FcpType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FcpMessage.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data(), target);
  }

  // optional string src_uri = 4;
  if (this->src_uri().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->src_uri().data(), this->src_uri().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "FcpMessage.src_uri");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->src_uri(), target);
  }

  // optional int32 direction = 5;
  if (this->direction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->direction(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:FcpMessage)
  return target;
}

size_t FcpMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:FcpMessage)
  size_t total_size = 0;

  // optional string dst_uri = 1;
  if (this->dst_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dst_uri());
  }

  // optional string src_uri = 4;
  if (this->src_uri().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->src_uri());
  }

  // optional .FcpMessage.FcpType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // optional string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // optional int32 direction = 5;
  if (this->direction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->direction());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FcpMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:FcpMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const FcpMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FcpMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:FcpMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:FcpMessage)
    UnsafeMergeFrom(*source);
  }
}

void FcpMessage::MergeFrom(const FcpMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:FcpMessage)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void FcpMessage::UnsafeMergeFrom(const FcpMessage& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.dst_uri().size() > 0) {

    dst_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dst_uri_);
  }
  if (from.src_uri().size() > 0) {

    src_uri_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.src_uri_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.direction() != 0) {
    set_direction(from.direction());
  }
}

void FcpMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:FcpMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FcpMessage::CopyFrom(const FcpMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:FcpMessage)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool FcpMessage::IsInitialized() const {

  return true;
}

void FcpMessage::Swap(FcpMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FcpMessage::InternalSwap(FcpMessage* other) {
  dst_uri_.Swap(&other->dst_uri_);
  src_uri_.Swap(&other->src_uri_);
  std::swap(type_, other->type_);
  data_.Swap(&other->data_);
  std::swap(direction_, other->direction_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FcpMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FcpMessage_descriptor_;
  metadata.reflection = FcpMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FcpMessage

// optional string dst_uri = 1;
void FcpMessage::clear_dst_uri() {
  dst_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FcpMessage::dst_uri() const {
  // @@protoc_insertion_point(field_get:FcpMessage.dst_uri)
  return dst_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcpMessage::set_dst_uri(const ::std::string& value) {
  
  dst_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FcpMessage.dst_uri)
}
void FcpMessage::set_dst_uri(const char* value) {
  
  dst_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FcpMessage.dst_uri)
}
void FcpMessage::set_dst_uri(const char* value, size_t size) {
  
  dst_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FcpMessage.dst_uri)
}
::std::string* FcpMessage::mutable_dst_uri() {
  
  // @@protoc_insertion_point(field_mutable:FcpMessage.dst_uri)
  return dst_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FcpMessage::release_dst_uri() {
  // @@protoc_insertion_point(field_release:FcpMessage.dst_uri)
  
  return dst_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcpMessage::set_allocated_dst_uri(::std::string* dst_uri) {
  if (dst_uri != NULL) {
    
  } else {
    
  }
  dst_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dst_uri);
  // @@protoc_insertion_point(field_set_allocated:FcpMessage.dst_uri)
}

// optional string src_uri = 4;
void FcpMessage::clear_src_uri() {
  src_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FcpMessage::src_uri() const {
  // @@protoc_insertion_point(field_get:FcpMessage.src_uri)
  return src_uri_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcpMessage::set_src_uri(const ::std::string& value) {
  
  src_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FcpMessage.src_uri)
}
void FcpMessage::set_src_uri(const char* value) {
  
  src_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FcpMessage.src_uri)
}
void FcpMessage::set_src_uri(const char* value, size_t size) {
  
  src_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FcpMessage.src_uri)
}
::std::string* FcpMessage::mutable_src_uri() {
  
  // @@protoc_insertion_point(field_mutable:FcpMessage.src_uri)
  return src_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FcpMessage::release_src_uri() {
  // @@protoc_insertion_point(field_release:FcpMessage.src_uri)
  
  return src_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcpMessage::set_allocated_src_uri(::std::string* src_uri) {
  if (src_uri != NULL) {
    
  } else {
    
  }
  src_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_uri);
  // @@protoc_insertion_point(field_set_allocated:FcpMessage.src_uri)
}

// optional .FcpMessage.FcpType type = 2;
void FcpMessage::clear_type() {
  type_ = 0;
}
::FcpMessage_FcpType FcpMessage::type() const {
  // @@protoc_insertion_point(field_get:FcpMessage.type)
  return static_cast< ::FcpMessage_FcpType >(type_);
}
void FcpMessage::set_type(::FcpMessage_FcpType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:FcpMessage.type)
}

// optional string data = 3;
void FcpMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FcpMessage::data() const {
  // @@protoc_insertion_point(field_get:FcpMessage.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcpMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FcpMessage.data)
}
void FcpMessage::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FcpMessage.data)
}
void FcpMessage::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FcpMessage.data)
}
::std::string* FcpMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:FcpMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FcpMessage::release_data() {
  // @@protoc_insertion_point(field_release:FcpMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FcpMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:FcpMessage.data)
}

// optional int32 direction = 5;
void FcpMessage::clear_direction() {
  direction_ = 0;
}
::google::protobuf::int32 FcpMessage::direction() const {
  // @@protoc_insertion_point(field_get:FcpMessage.direction)
  return direction_;
}
void FcpMessage::set_direction(::google::protobuf::int32 value) {
  
  direction_ = value;
  // @@protoc_insertion_point(field_set:FcpMessage.direction)
}

inline const FcpMessage* FcpMessage::internal_default_instance() {
  return &FcpMessage_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
